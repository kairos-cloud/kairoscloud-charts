name: Test Charts

on:
  pull_request:
    branches:
      - main
    paths:
      - 'charts/**'
      - '.github/workflows/test.yml'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Run Helm Lint
        run: |
          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "Linting chart: $chart"
              helm lint "$chart"
            fi
          done

  unittest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Install helm-unittest plugin
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest.git

      - name: Run Helm Unit Tests
        run: |
          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "Running unit tests for chart: $chart"
              helm unittest "$chart" --color
            fi
          done

  template:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario: [default, statefulset, autoscaling, security, monitoring, production]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Run Helm Template - ${{ matrix.scenario }}
        run: |
          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Testing chart: $chart_name with scenario: ${{ matrix.scenario }}"
              
              case "${{ matrix.scenario }}" in
                "default")
                  helm template "$chart_name" "$chart" --debug
                  ;;
                "statefulset")
                  helm template "$chart_name" "$chart" \
                    --set statefulset.enabled=true \
                    --set persistence.enabled=true \
                    --set persistence.size=10Gi \
                    --debug
                  ;;
                "autoscaling")
                  helm template "$chart_name" "$chart" \
                    --set autoscaling.enabled=true \
                    --set replicaCount=3 \
                    --set autoscaling.minReplicas=2 \
                    --set autoscaling.maxReplicas=10 \
                    --debug
                  ;;
                "security")
                  helm template "$chart_name" "$chart" \
                    --set networkPolicy.enabled=true \
                    --set rbac.enabled=true \
                    --set secret.enabled=true \
                    --set podSecurityContext.fsGroup=2000 \
                    --set securityContext.runAsNonRoot=true \
                    --debug
                  ;;
                "monitoring")
                  helm template "$chart_name" "$chart" \
                    --set serviceMonitor.enabled=true \
                    --set certificate.enabled=true \
                    --set ingress.enabled=true \
                    --debug
                  ;;
                "production")
                  helm template "$chart_name" "$chart" \
                    --set replicaCount=3 \
                    --set podDisruptionBudget.enabled=true \
                    --set autoscaling.enabled=true \
                    --set networkPolicy.enabled=true \
                    --set rbac.enabled=true \
                    --set serviceMonitor.enabled=true \
                    --set persistence.enabled=true \
                    --set resources.limits.cpu=1000m \
                    --set resources.limits.memory=2Gi \
                    --debug
                  ;;
              esac
            fi
          done

  dry-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Run Helm Dry Run
        run: |
          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Dry run chart: $chart_name"
              helm install "$chart_name" "$chart" --dry-run --debug
            fi
          done

  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Validate Chart Dependencies
        run: |
          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "Checking dependencies for: $chart"
              helm dependency list "$chart"
              helm dependency update "$chart"
            fi
          done

      - name: Validate Chart Structure
        run: |
          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Validating chart structure: $chart_name"
              
              # Check required files exist
              required_files=("Chart.yaml" "values.yaml" "templates/_helpers.tpl")
              for file in "${required_files[@]}"; do
                if [ ! -f "$chart/$file" ]; then
                  echo "ERROR: Required file missing: $chart/$file"
                  exit 1
                fi
              done
              
              # Check Chart.yaml has required fields
              if ! grep -q "name:" "$chart/Chart.yaml"; then
                echo "ERROR: Chart.yaml missing 'name' field"
                exit 1
              fi
              
              if ! grep -q "version:" "$chart/Chart.yaml"; then
                echo "ERROR: Chart.yaml missing 'version' field"
                exit 1
              fi
              
              echo "Chart structure validation passed for: $chart_name"
            fi
          done

      - name: Test Chart Package
        run: |
          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Packaging chart: $chart_name"
              helm package "$chart"
              
              # Verify the package
              package_file=$(ls ${chart_name}-*.tgz 2>/dev/null | head -1)
              if [ -n "$package_file" ]; then
                echo "Package created successfully: $package_file"
                helm show chart "$package_file"
                
                # Test package integrity
                helm show values "$package_file" > /dev/null
                helm show readme "$package_file" > /dev/null
                echo "Package integrity test passed for: $chart_name"
              else
                echo "ERROR: Package not created for $chart_name"
                exit 1
              fi
            fi
          done