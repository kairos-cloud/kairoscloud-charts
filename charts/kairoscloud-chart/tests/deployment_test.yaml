# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: deployment
templates:
  - core/deployment.yaml
tests:
  - it: should create deployment with default values
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kairoscloud-chart
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.template.spec.containers[0].image
          value: nginx:1.0.0
      - equal:
          path: spec.template.spec.containers[0].name
          value: kairoscloud-chart
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: http

  - it: should create deployment with custom replica count
    set:
      deployment:
        replicaCount: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3

  - it: should create deployment with custom image
    set:
      deployment:
        image:
          repository: myregistry/kairoscloud
          tag: v2.0.0
          pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: myregistry/kairoscloud:v2.0.0
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: Always

  - it: should create deployment with resource limits
    set:
      deployment:
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 2Gi
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 500m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1Gi

  - it: should create deployment with security context
    set:
      deployment:
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
        podSecurityContext:
          fsGroup: 2000
    asserts:
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 1000
      - contains:
          path: spec.template.spec.containers[0].securityContext.capabilities.drop
          content: ALL

  - it: should create deployment with liveness probe
    set:
      deployment:
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.port
          value: http
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 30
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.periodSeconds
          value: 10

  - it: should create deployment with readiness probe
    set:
      deployment:
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /ready
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.port
          value: http
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.periodSeconds
          value: 5

  - it: should create deployment with environment variables
    set:
      deployment:
        env:
          - name: DATABASE_URL
            value: "postgresql://localhost:5432/kairoscloud"
          - name: LOG_LEVEL
            value: "info"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: DATABASE_URL
      - equal:
          path: spec.template.spec.containers[0].env[0].value
          value: postgresql://localhost:5432/kairoscloud
      - equal:
          path: spec.template.spec.containers[0].env[1].name
          value: LOG_LEVEL
      - equal:
          path: spec.template.spec.containers[0].env[1].value
          value: info

  - it: should create deployment with image pull secrets
    set:
      deployment:
        imagePullSecrets:
          - name: myregistry-secret
          - name: another-secret
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: myregistry-secret
      - equal:
          path: spec.template.spec.imagePullSecrets[1].name
          value: another-secret

  - it: should create deployment with service account
    set:
      serviceAccount:
        create: true
        name: custom-service-account
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: custom-service-account

  - it: should create deployment with rolling update strategy
    set:
      deployment:
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 50%
            maxUnavailable: 50%
    asserts:
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
      - equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 50%
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 50%

  - it: should create deployment with recreate strategy
    set:
      deployment:
        strategy:
          type: Recreate
    asserts:
      - equal:
          path: spec.strategy.type
          value: Recreate

  - it: should create deployment with revision history limit
    set:
      deployment:
        revisionHistoryLimit: 5
    asserts:
      - equal:
          path: spec.revisionHistoryLimit
          value: 5

  - it: should create deployment with progress deadline
    set:
      deployment:
        progressDeadlineSeconds: 300
    asserts:
      - equal:
          path: spec.progressDeadlineSeconds
          value: 300

  - it: should create deployment with init containers
    set:
      deployment:
        initContainers:
          - name: init-container-1
            image: busybox:1.35
            command: ['sh', '-c', 'echo "Init container 1"']
          - name: init-container-2
            image: alpine:3.18
            command: ['sh', '-c', 'echo "Init container 2"']
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: init-container-1
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: busybox:1.35
      - equal:
          path: spec.template.spec.initContainers[0].command[0]
          value: sh
      - equal:
          path: spec.template.spec.initContainers[1].name
          value: init-container-2
      - equal:
          path: spec.template.spec.initContainers[1].image
          value: alpine:3.18

  - it: should create deployment with complete strategy configuration
    set:
      deployment:
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 0
        revisionHistoryLimit: 3
        progressDeadlineSeconds: 120
    asserts:
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
      - equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 1
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 0
      - equal:
          path: spec.revisionHistoryLimit
          value: 3
      - equal:
          path: spec.progressDeadlineSeconds
          value: 120

  - it: should create deployment with default empty podSecurityContext
    set:
      deployment:
        enabled: true
        image:
          repository: nginx
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.securityContext
          value: {}

  - it: should create deployment with explicit podSecurityContext configuration
    set:
      deployment:
        enabled: true
        image:
          repository: nginx
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 2000
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000

  # Comprehensive probe tests
  - it: should create deployment with tcpSocket liveness probe
    set:
      deployment:
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.tcpSocket.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 15
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.periodSeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
          value: 3
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.failureThreshold
          value: 3

  - it: should create deployment with exec liveness probe
    set:
      deployment:
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "pgrep nginx"
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[0]
          value: /bin/sh
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[1]
          value: -c
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[2]
          value: pgrep nginx
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 20
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.successThreshold
          value: 1

  - it: should create deployment with grpc liveness probe
    set:
      deployment:
        livenessProbe:
          grpc:
            port: 9090
            service: health
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.grpc.port
          value: 9090
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.grpc.service
          value: health
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
          value: 2

  - it: should create deployment with tcpSocket readiness probe
    set:
      deployment:
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 2
          failureThreshold: 3
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.tcpSocket.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.periodSeconds
          value: 3
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.timeoutSeconds
          value: 2

  - it: should create deployment with exec readiness probe
    set:
      deployment:
        readinessProbe:
          exec:
            command:
              - curl
              - -f
              - http://localhost:8080/ready
          initialDelaySeconds: 3
          periodSeconds: 2
          successThreshold: 1
          failureThreshold: 3
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.exec.command[0]
          value: curl
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.exec.command[1]
          value: -f
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.exec.command[2]
          value: http://localhost:8080/ready
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 3
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.successThreshold
          value: 1

  - it: should create deployment with grpc readiness probe
    set:
      deployment:
        readinessProbe:
          grpc:
            port: 9090
          initialDelaySeconds: 2
          periodSeconds: 2
          timeoutSeconds: 1
          successThreshold: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.grpc.port
          value: 9090
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 2
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.successThreshold
          value: 1

  - it: should create deployment with httpGet startup probe
    set:
      deployment:
        startupProbe:
          httpGet:
            path: /startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.path
          value: /startup
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.port
          value: http
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 30
      - equal:
          path: spec.template.spec.containers[0].startupProbe.successThreshold
          value: 1

  - it: should create deployment with tcpSocket startup probe
    set:
      deployment:
        startupProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 2
          failureThreshold: 20
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.tcpSocket.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 20

  - it: should create deployment with exec startup probe
    set:
      deployment:
        startupProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -f /tmp/ready"
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
          failureThreshold: 15
          successThreshold: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.exec.command[0]
          value: /bin/sh
      - equal:
          path: spec.template.spec.containers[0].startupProbe.exec.command[1]
          value: -c
      - equal:
          path: spec.template.spec.containers[0].startupProbe.exec.command[2]
          value: test -f /tmp/ready
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 15

  - it: should create deployment with grpc startup probe
    set:
      deployment:
        startupProbe:
          grpc:
            port: 9090
            service: startup
          initialDelaySeconds: 3
          periodSeconds: 2
          timeoutSeconds: 1
          failureThreshold: 10
          successThreshold: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.port
          value: 9090
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.service
          value: startup
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 3
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 10


  - it: should create deployment with all probe types combined
    set:
      deployment:
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -f /tmp/ready"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 30
          successThreshold: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.tcpSocket.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].startupProbe.exec.command[0]
          value: /bin/sh