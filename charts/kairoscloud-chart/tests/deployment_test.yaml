# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: deployment
templates:
  - core/deployment.yaml
tests:
  - it: should create deployment with default values
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kairoscloud-chart
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.template.spec.containers[0].image
          value: nginx:1.0.0
      - equal:
          path: spec.template.spec.containers[0].name
          value: kairoscloud-chart
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: http

  - it: should create deployment with custom replica count
    set:
      deployment:
        replicaCount: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3

  - it: should create deployment with custom image
    set:
      deployment:
        image:
          repository: myregistry/kairoscloud
          tag: v2.0.0
          pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: myregistry/kairoscloud:v2.0.0
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: Always

  - it: should create deployment with resource limits
    set:
      deployment:
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 1000m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 2Gi
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 500m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 1Gi

  - it: should create deployment with security context
    set:
      deployment:
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
        podSecurityContext:
          fsGroup: 2000
    asserts:
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 1000
      - contains:
          path: spec.template.spec.containers[0].securityContext.capabilities.drop
          content: ALL

  - it: should create deployment with liveness probe
    set:
      deployment:
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.port
          value: http
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 30
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.periodSeconds
          value: 10

  - it: should create deployment with readiness probe
    set:
      deployment:
        readinessProbe:
          enabled: true
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /ready
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.port
          value: http
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.periodSeconds
          value: 5

  - it: should create deployment with environment variables
    set:
      deployment:
        env:
          - name: DATABASE_URL
            value: "postgresql://localhost:5432/kairoscloud"
          - name: LOG_LEVEL
            value: "info"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: DATABASE_URL
      - equal:
          path: spec.template.spec.containers[0].env[0].value
          value: postgresql://localhost:5432/kairoscloud
      - equal:
          path: spec.template.spec.containers[0].env[1].name
          value: LOG_LEVEL
      - equal:
          path: spec.template.spec.containers[0].env[1].value
          value: info

  - it: should create deployment with image pull secrets
    set:
      deployment:
        imagePullSecrets:
          - name: myregistry-secret
          - name: another-secret
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: myregistry-secret
      - equal:
          path: spec.template.spec.imagePullSecrets[1].name
          value: another-secret

  - it: should create deployment with service account
    set:
      serviceAccount:
        create: true
        name: custom-service-account
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: custom-service-account