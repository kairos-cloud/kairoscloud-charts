# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: secret
templates:
  - core/secret.yaml
tests:
  - it: should create secret with default values
    set:
      secret.enabled: true
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kairoscloud-chart-secret
      - equal:
          path: type
          value: Opaque
      - isNull:
          path: data
      - isNull:
          path: stringData

  - it: should create secret with custom type
    set:
      secret:
        enabled: true
        type: kubernetes.io/tls
    asserts:
      - equal:
          path: type
          value: kubernetes.io/tls

  - it: should create secret with stringData
    set:
      secret:
        enabled: true
        stringData:
          database_password: "super-secret-password"
          api_key: "sk-1234567890abcdef"
          jwt_secret: "my-jwt-secret-key"
          database_url: "postgresql://user:pass@localhost:5432/db"
    asserts:
      - equal:
          path: stringData.database_password
          value: super-secret-password
      - equal:
          path: stringData.api_key
          value: sk-1234567890abcdef
      - equal:
          path: stringData.jwt_secret
          value: my-jwt-secret-key
      - equal:
          path: stringData.database_url
          value: postgresql://user:pass@localhost:5432/db

  - it: should create secret with base64 encoded data
    set:
      secret:
        enabled: true
        data:
          database_password: "c3VwZXItc2VjcmV0LXBhc3N3b3Jk"  # base64 encoded "super-secret-password"
          api_key: "c2stMTIzNDU2Nzg5MGFiY2RlZg=="  # base64 encoded "sk-1234567890abcdef"
          jwt_secret: "bXktand0LXNlY3JldC1rZXk="  # base64 encoded "my-jwt-secret-key"
    asserts:
      - equal:
          path: data.database_password
          value: c3VwZXItc2VjcmV0LXBhc3N3b3Jk
      - equal:
          path: data.api_key
          value: c2stMTIzNDU2Nzg5MGFiY2RlZg==
      - equal:
          path: data.jwt_secret
          value: bXktand0LXNlY3JldC1rZXk=

  - it: should create secret with both data and stringData
    set:
      secret:
        enabled: true
        data:
          existing_secret: "ZXhpc3Rpbmctc2VjcmV0"  # base64 encoded "existing-secret"
        stringData:
          new_secret: "new-secret-value"
          another_secret: "another-secret-value"
    asserts:
      - equal:
          path: data.existing_secret
          value: ZXhpc3Rpbmctc2VjcmV0
      - equal:
          path: stringData.new_secret
          value: new-secret-value
      - equal:
          path: stringData.another_secret
          value: another-secret-value

  - it: should create secret with empty data
    set:
      secret:
        enabled: true
        data: {}
        stringData: {}
    asserts:
      - isNull:
          path: data
      - isNull:
          path: stringData