# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: statefulset
templates:
  - core/statefulset.yaml
tests:
  - it: should create statefulset with basic configuration
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        serviceName: "my-service"
        podManagementPolicy: OrderedReady
        updateStrategy:
          type: RollingUpdate
        replicaCount: 3
        image:
          repository: nginx
          tag: "1.21"
          pullPolicy: IfNotPresent
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kairoscloud-chart
      - equal:
          path: spec.serviceName
          value: my-service
      - equal:
          path: spec.replicas
          value: 3
      - equal:
          path: spec.podManagementPolicy
          value: OrderedReady
      - equal:
          path: spec.updateStrategy.type
          value: RollingUpdate
      - equal:
          path: spec.template.spec.containers[0].image
          value: nginx:1.21

  - it: should create statefulset with default service name
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        serviceName: ""
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.serviceName
          value: RELEASE-NAME-kairoscloud-chart-headless

  - it: should create statefulset with persistence enabled
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
      persistence:
        enabled: true
        size: 20Gi
        accessMode: ReadWriteOnce
        storageClass: fast-ssd
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: 20Gi
      - equal:
          path: spec.volumeClaimTemplates[0].spec.accessModes[0]
          value: ReadWriteOnce
      - equal:
          path: spec.volumeClaimTemplates[0].spec.storageClassName
          value: fast-ssd
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: data
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /data

  - it: should create statefulset with extra volumes and volume mounts
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        extraVolumes:
          - name: config-volume
            configMap:
              name: my-config
        extraVolumeMounts:
          - name: config-volume
            mountPath: /etc/config
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.volumes[0].name
          value: config-volume
      - equal:
          path: spec.template.spec.volumes[0].configMap.name
          value: my-config
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: config-volume
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /etc/config

  - it: should create statefulset with environment variables
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        env:
          - name: ENV_VAR_1
            value: "value1"
          - name: ENV_VAR_2
            value: "value2"
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: ENV_VAR_1
      - equal:
          path: spec.template.spec.containers[0].env[0].value
          value: value1
      - equal:
          path: spec.template.spec.containers[0].env[1].name
          value: ENV_VAR_2
      - equal:
          path: spec.template.spec.containers[0].env[1].value
          value: value2

  - it: should create statefulset with probes enabled
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        startupProbe:
          httpGet:
            path: /startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /ready
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.path
          value: /startup

  - it: should create statefulset with node selector and affinity
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
      nodeSelector:
        kubernetes.io/os: linux
        node-type: stateful
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
    asserts:
      - isKind:
          of: StatefulSet
      - isAPIVersion:
          of: apps/v1

  - it: should create statefulset with tolerations
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        tolerations:
          - key: "key1"
            operator: "Equal"
            value: "value1"
            effect: "NoSchedule"
          - key: "key2"
            operator: "Exists"
            effect: "NoExecute"
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.tolerations[0].key
          value: key1
      - equal:
          path: spec.template.spec.tolerations[0].operator
          value: Equal
      - equal:
          path: spec.template.spec.tolerations[1].key
          value: key2
      - equal:
          path: spec.template.spec.tolerations[1].operator
          value: Exists

  - it: should not create statefulset when disabled
    set:
      statefulset:
        enabled: false
    asserts:
      - notExists:
          path: metadata

  - it: should create statefulset with image pull secrets
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        imagePullSecrets:
          - name: my-registry-secret
          - name: another-secret
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: my-registry-secret
      - equal:
          path: spec.template.spec.imagePullSecrets[1].name
          value: another-secret

  - it: should create statefulset with pod annotations
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    asserts:
      - isKind:
          of: StatefulSet
      - isAPIVersion:
          of: apps/v1

  - it: should create statefulset with default empty podSecurityContext
    set:
      statefulset:
        enabled: true
        image:
          repository: nginx
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.securityContext
          value: {}

  - it: should create statefulset with explicit podSecurityContext configuration
    set:
      statefulset:
        enabled: true
        image:
          repository: nginx
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 2000
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000

  # Comprehensive probe tests for StatefulSet
  - it: should create statefulset with tcpSocket liveness probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.tcpSocket.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 15
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.periodSeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
          value: 3
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.failureThreshold
          value: 3

  - it: should create statefulset with exec liveness probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "pgrep nginx"
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[0]
          value: /bin/sh
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[1]
          value: -c
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.exec.command[2]
          value: pgrep nginx
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 20
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.successThreshold
          value: 1

  - it: should create statefulset with grpc liveness probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        livenessProbe:
          grpc:
            port: 9090
            service: health
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.grpc.port
          value: 9090
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.grpc.service
          value: health
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
          value: 2

  - it: should create statefulset with tcpSocket readiness probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 2
          failureThreshold: 3
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.tcpSocket.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.periodSeconds
          value: 3
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.timeoutSeconds
          value: 2

  - it: should create statefulset with exec readiness probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        readinessProbe:
          exec:
            command:
              - curl
              - -f
              - http://localhost:8080/ready
          initialDelaySeconds: 3
          periodSeconds: 2
          successThreshold: 1
          failureThreshold: 3
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.exec.command[0]
          value: curl
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.exec.command[1]
          value: -f
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.exec.command[2]
          value: http://localhost:8080/ready
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 3
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.successThreshold
          value: 1

  - it: should create statefulset with grpc readiness probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        readinessProbe:
          grpc:
            port: 9090
          initialDelaySeconds: 2
          periodSeconds: 2
          timeoutSeconds: 1
          successThreshold: 1
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.grpc.port
          value: 9090
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 2
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.successThreshold
          value: 1

  - it: should create statefulset with httpGet startup probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        startupProbe:
          httpGet:
            path: /startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.path
          value: /startup
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.port
          value: http
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 30
      - equal:
          path: spec.template.spec.containers[0].startupProbe.successThreshold
          value: 1

  - it: should create statefulset with tcpSocket startup probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        startupProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 2
          failureThreshold: 20
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].startupProbe.tcpSocket.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 20

  - it: should create statefulset with exec startup probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        startupProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -f /tmp/ready"
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
          failureThreshold: 15
          successThreshold: 1
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].startupProbe.exec.command[0]
          value: /bin/sh
      - equal:
          path: spec.template.spec.containers[0].startupProbe.exec.command[1]
          value: -c
      - equal:
          path: spec.template.spec.containers[0].startupProbe.exec.command[2]
          value: test -f /tmp/ready
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 15

  - it: should create statefulset with grpc startup probe
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        startupProbe:
          grpc:
            port: 9090
            service: startup
          initialDelaySeconds: 3
          periodSeconds: 2
          timeoutSeconds: 1
          failureThreshold: 10
          successThreshold: 1
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.port
          value: 9090
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.service
          value: startup
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 3
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 10


  - it: should create statefulset with all probe types combined
    set:
      deployment:
        enabled: false
      statefulset:
        enabled: true
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -f /tmp/ready"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 30
          successThreshold: 1
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.tcpSocket.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].startupProbe.exec.command[0]
          value: /bin/sh
