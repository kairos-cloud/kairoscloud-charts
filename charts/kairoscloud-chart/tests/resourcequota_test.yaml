# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: resourcequota
templates:
  - core/resourcequota.yaml
tests:
  - it: should not create resourcequota when disabled
    set:
      resourceQuota:
        enabled: false
    asserts:
      - isNull:
          path: metadata

  - it: should create resourcequota with basic limits
    set:
      resourceQuota:
        enabled: true
        hard:
          requests.cpu: "2"
          requests.memory: 4Gi
          limits.cpu: "4"
          limits.memory: 8Gi
          pods: "10"
    asserts:
      - isKind:
          of: ResourceQuota
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kairoscloud-chart-quota
      - isAPIVersion:
          of: v1
      - equal:
          path: spec.hard["requests.cpu"]
          value: "2"
      - equal:
          path: spec.hard["requests.memory"]
          value: 4Gi
      - equal:
          path: spec.hard["limits.cpu"]
          value: "4"
      - equal:
          path: spec.hard["limits.memory"]
          value: 8Gi
      - equal:
          path: spec.hard.pods
          value: "10"

  - it: should create resourcequota with storage limits
    set:
      resourceQuota:
        enabled: true
        hard:
          requests.storage: 20Gi
          persistentvolumeclaims: "5"
          services: "3"
    asserts:
      - isKind:
          of: ResourceQuota
      - equal:
          path: spec.hard["requests.storage"]
          value: 20Gi
      - equal:
          path: spec.hard.persistentvolumeclaims
          value: "5"
      - equal:
          path: spec.hard.services
          value: "3"

  - it: should create resourcequota with configmap and secret limits
    set:
      resourceQuota:
        enabled: true
        hard:
          configmaps: "10"
          secrets: "5"
          services.loadbalancers: "2"
          services.nodeports: "1"
    asserts:
      - isKind:
          of: ResourceQuota
      - equal:
          path: spec.hard.configmaps
          value: "10"
      - equal:
          path: spec.hard.secrets
          value: "5"
      - equal:
          path: spec.hard["services.loadbalancers"]
          value: "2"
      - equal:
          path: spec.hard["services.nodeports"]
          value: "1"

  - it: should create resourcequota with scopes
    set:
      resourceQuota:
        enabled: true
        hard:
          pods: "5"
        scopes:
          - BestEffort
          - NotTerminating
    asserts:
      - isKind:
          of: ResourceQuota
      - contains:
          path: spec.scopes
          content: BestEffort
      - contains:
          path: spec.scopes
          content: NotTerminating

  - it: should create resourcequota with scope selector
    set:
      resourceQuota:
        enabled: true
        hard:
          pods: "5"
        scopeSelector:
          matchExpressions:
            - scopeName: PriorityClass
              operator: In
              values:
                - high
                - medium
    asserts:
      - isKind:
          of: ResourceQuota
      - equal:
          path: spec.scopeSelector.matchExpressions[0].scopeName
          value: PriorityClass
      - equal:
          path: spec.scopeSelector.matchExpressions[0].operator
          value: In
      - equal:
          path: spec.scopeSelector.matchExpressions[0].values[0]
          value: high
      - equal:
          path: spec.scopeSelector.matchExpressions[0].values[1]
          value: medium

  - it: should create resourcequota with annotations
    set:
      resourceQuota:
        enabled: true
        annotations:
          description: "Resource quota for the namespace"
          contact: "admin@example.com"
        hard:
          pods: "5"
    asserts:
      - isKind:
          of: ResourceQuota
      - equal:
          path: metadata.annotations.description
          value: "Resource quota for the namespace"
      - equal:
          path: metadata.annotations.contact
          value: "admin@example.com"

  - it: should create resourcequota with custom name
    set:
      fullnameOverride: "custom-app"
      resourceQuota:
        enabled: true
        hard:
          pods: "5"
    asserts:
      - isKind:
          of: ResourceQuota
      - equal:
          path: metadata.name
          value: custom-app-quota

  - it: should create resourcequota with complex limits
    set:
      resourceQuota:
        enabled: true
        hard:
          requests.cpu: "1"
          requests.memory: 2Gi
          limits.cpu: "2"
          limits.memory: 4Gi
          pods: "20"
          services: "10"
          persistentvolumeclaims: "5"
          configmaps: "20"
          secrets: "10"
          services.loadbalancers: "3"
          services.nodeports: "2"
          requests.storage: 50Gi
        scopes:
          - BestEffort
        scopeSelector:
          matchExpressions:
            - scopeName: PriorityClass
              operator: In
              values:
                - high
    asserts:
      - isKind:
          of: ResourceQuota
      - equal:
          path: spec.hard["requests.cpu"]
          value: "1"
      - equal:
          path: spec.hard["requests.memory"]
          value: 2Gi
      - equal:
          path: spec.hard["limits.cpu"]
          value: "2"
      - equal:
          path: spec.hard["limits.memory"]
          value: 4Gi
      - equal:
          path: spec.hard.pods
          value: "20"
      - equal:
          path: spec.hard.services
          value: "10"
      - equal:
          path: spec.hard.persistentvolumeclaims
          value: "5"
      - equal:
          path: spec.hard.configmaps
          value: "20"
      - equal:
          path: spec.hard.secrets
          value: "10"
      - equal:
          path: spec.hard["services.loadbalancers"]
          value: "3"
      - equal:
          path: spec.hard["services.nodeports"]
          value: "2"
      - equal:
          path: spec.hard["requests.storage"]
          value: 50Gi
      - contains:
          path: spec.scopes
          content: BestEffort
      - equal:
          path: spec.scopeSelector.matchExpressions[0].scopeName
          value: PriorityClass
      - equal:
          path: spec.scopeSelector.matchExpressions[0].operator
          value: In
      - equal:
          path: spec.scopeSelector.matchExpressions[0].values[0]
          value: high
