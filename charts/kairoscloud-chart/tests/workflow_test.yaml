# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: workflow
templates:
  - chaos-mesh/workflow.yaml
tests:
  - it: should create workflow with basic parallel configuration
    set:
      chaosMesh:
        enabled: true
        workflow:
          enabled: true
          entry: "entry"
          templates:
            - name: "entry"
              type: "Parallel"
              deadline: "240s"
              children:
                - "stress-chaos"
                - "network-chaos"
            - name: "stress-chaos"
              type: "StressChaos"
              deadline: "60s"
              stressChaos:
                mode: "one"
                selector:
                  labelSelectors:
                    app: "my-app"
                stressors:
                  cpu:
                    workers: 1
                    load: 50
            - name: "network-chaos"
              type: "NetworkChaos"
              deadline: "30s"
              networkChaos:
                action: "delay"
                mode: "one"
                selector:
                  labelSelectors:
                    app: "my-app"
                delay:
                  latency: "10ms"
                  correlation: "100"
                  jitter: "0ms"
    asserts:
      - isKind:
          of: Workflow
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kairoscloud-chart-workflow
      - equal:
          path: spec.entry
          value: "entry"
      - equal:
          path: spec.templates[0].name
          value: "entry"
      - equal:
          path: spec.templates[0].templateType
          value: "Parallel"
      - equal:
          path: spec.templates[0].deadline
          value: "240s"
      - equal:
          path: spec.templates[0].children[0]
          value: "stress-chaos"
      - equal:
          path: spec.templates[0].children[1]
          value: "network-chaos"

  - it: should create workflow with serial configuration
    set:
      chaosMesh:
        enabled: true
        workflow:
          enabled: true
          entry: "entry"
          templates:
            - name: "entry"
              type: "Serial"
              deadline: "300s"
              children:
                - "health-check"
                - "pod-chaos"
            - name: "health-check"
              type: "Task"
              deadline: "30s"
              task:
                container:
                  name: "health-check"
                  image: "curlimages/curl:latest"
                  command: ["curl", "-f", "http://my-app:8080/health"]
            - name: "pod-chaos"
              type: "PodChaos"
              deadline: "60s"
              podChaos:
                action: "pod-kill"
                mode: "one"
                selector:
                  labelSelectors:
                    app: "my-app"
    asserts:
      - equal:
          path: spec.templates[0].templateType
          value: "Serial"
      - equal:
          path: spec.templates[1].templateType
          value: "Task"
      - equal:
          path: spec.templates[1].task.container.name
          value: "health-check"
      - equal:
          path: spec.templates[1].task.container.image
          value: "curlimages/curl:latest"
      - equal:
          path: spec.templates[2].templateType
          value: "PodChaos"
      - equal:
          path: spec.templates[2].podChaos.action
          value: "pod-kill"

  - it: should create workflow with conditional branches
    set:
      chaosMesh:
        enabled: true
        workflow:
          enabled: true
          entry: "entry"
          templates:
            - name: "entry"
              type: "Task"
              deadline: "30s"
              task:
                container:
                  name: "health-check"
                  image: "curlimages/curl:latest"
                  command: ["curl", "-f", "http://my-app:8080/health"]
              conditionalBranches:
                - target: "pod-chaos"
                  expression: "exitCode == 0"
                - target: "skip-chaos"
                  expression: "exitCode != 0"
            - name: "pod-chaos"
              type: "PodChaos"
              deadline: "60s"
              podChaos:
                action: "pod-kill"
                mode: "one"
                selector:
                  labelSelectors:
                    app: "my-app"
            - name: "skip-chaos"
              type: "Suspend"
              deadline: "10s"
    asserts:
      - equal:
          path: spec.templates[0].conditionalBranches[0].target
          value: "pod-chaos"
      - equal:
          path: spec.templates[0].conditionalBranches[0].expression
          value: "exitCode == 0"
      - equal:
          path: spec.templates[0].conditionalBranches[1].target
          value: "skip-chaos"
      - equal:
          path: spec.templates[0].conditionalBranches[1].expression
          value: "exitCode != 0"
      - equal:
          path: spec.templates[2].templateType
          value: "Suspend"

  - it: should create workflow with scheduled chaos
    set:
      chaosMesh:
        enabled: true
        workflow:
          enabled: true
          entry: "entry"
          templates:
            - name: "entry"
              type: "Schedule"
              deadline: "120s"
              schedule:
                schedule: "@every 30s"
                type: "PodChaos"
                podChaos:
                  action: "pod-kill"
                  mode: "one"
                  selector:
                    labelSelectors:
                      app: "my-app"
    asserts:
      - equal:
          path: spec.templates[0].templateType
          value: "Schedule"
      - equal:
          path: spec.templates[0].schedule.schedule
          value: "@every 30s"
      - equal:
          path: spec.templates[0].schedule.type
          value: "PodChaos"
      - equal:
          path: spec.templates[0].schedule.podChaos.action
          value: "pod-kill"

  - it: should create workflow with status check
    set:
      chaosMesh:
        enabled: true
        workflow:
          enabled: true
          entry: "entry"
          templates:
            - name: "entry"
              type: "StatusCheck"
              deadline: "60s"
              abortWithStatusCheck: true
              statusCheck:
                mode: "one"
                selector:
                  labelSelectors:
                    app: "my-app"
                type: "HTTP"
                http:
                  url: "http://my-app:8080/health"
                  method: "GET"
                  expectedStatus: 200
    asserts:
      - equal:
          path: spec.templates[0].templateType
          value: "StatusCheck"
      - equal:
          path: spec.templates[0].abortWithStatusCheck
          value: true
      - equal:
          path: spec.templates[0].statusCheck.type
          value: "HTTP"
      - equal:
          path: spec.templates[0].statusCheck.http.url
          value: "http://my-app:8080/health"
      - equal:
          path: spec.templates[0].statusCheck.http.method
          value: "GET"
      - equal:
          path: spec.templates[0].statusCheck.http.expectedStatus
          value: 200

  - it: should create workflow with custom task and volumes
    set:
      chaosMesh:
        enabled: true
        workflow:
          enabled: true
          entry: "entry"
          templates:
            - name: "entry"
              type: "Task"
              deadline: "30s"
              task:
                container:
                  name: "custom-task"
                  image: "busybox:latest"
                  command: ["sh", "-c", "echo 'Hello World'"]
                volumes:
                  - name: "config-volume"
                    configMap:
                      name: "my-config"
    asserts:
      - equal:
          path: spec.templates[0].task.container.name
          value: "custom-task"
      - equal:
          path: spec.templates[0].task.container.image
          value: "busybox:latest"
      - equal:
          path: spec.templates[0].task.volumes[0].name
          value: "config-volume"
      - equal:
          path: spec.templates[0].task.volumes[0].configMap.name
          value: "my-config"

  - it: should create workflow with annotations
    set:
      chaosMesh:
        enabled: true
        workflow:
          enabled: true
          annotations:
            test-annotation: "test-value"
            description: "Chaos Mesh Workflow"
          entry: "entry"
          templates:
            - name: "entry"
              type: "Suspend"
              deadline: "10s"
    asserts:
      - equal:
          path: metadata.annotations.test-annotation
          value: "test-value"
      - equal:
          path: metadata.annotations.description
          value: "Chaos Mesh Workflow"

