# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: servicemonitor
templates:
  - core/servicemonitor.yaml
tests:
  - it: should not create servicemonitor when disabled
    set:
      serviceMonitor:
        enabled: false
    asserts:
      - isNull:
          path: metadata

  - it: should create servicemonitor with default values
    set:
      serviceMonitor:
        enabled: true
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kairoscloud-chart
      - isAPIVersion:
          of: monitoring.coreos.com/v1
      - equal:
          path: spec.endpoints[0].port
          value: http
      - equal:
          path: spec.endpoints[0].path
          value: /metrics

  - it: should create servicemonitor with custom port and path
    set:
      serviceMonitor:
        enabled: true
        port: metrics
        path: /prometheus/metrics
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: spec.endpoints[0].port
          value: metrics
      - equal:
          path: spec.endpoints[0].path
          value: /prometheus/metrics

  - it: should create servicemonitor with interval and timeout
    set:
      serviceMonitor:
        enabled: true
        interval: 60s
        scrapeTimeout: 30s
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: spec.endpoints[0].interval
          value: 60s
      - equal:
          path: spec.endpoints[0].scrapeTimeout
          value: 30s

  - it: should create servicemonitor with https scheme
    set:
      serviceMonitor:
        enabled: true
        scheme: https
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: spec.endpoints[0].scheme
          value: https

  - it: should create servicemonitor with tls config
    set:
      serviceMonitor:
        enabled: true
        tlsConfig:
          insecureSkipVerify: true
          serverName: metrics.example.com
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: spec.endpoints[0].tlsConfig.insecureSkipVerify
          value: true
      - equal:
          path: spec.endpoints[0].tlsConfig.serverName
          value: metrics.example.com

  - it: should create servicemonitor with bearer token secret
    set:
      serviceMonitor:
        enabled: true
        bearerTokenSecret:
          name: prometheus-token
          key: token
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: spec.endpoints[0].bearerTokenSecret.name
          value: prometheus-token
      - equal:
          path: spec.endpoints[0].bearerTokenSecret.key
          value: token

  - it: should create servicemonitor with basic auth
    set:
      serviceMonitor:
        enabled: true
        basicAuth:
          username:
            name: prometheus-auth
            key: username
          password:
            name: prometheus-auth
            key: password
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: spec.endpoints[0].basicAuth.username.name
          value: prometheus-auth
      - equal:
          path: spec.endpoints[0].basicAuth.username.key
          value: username
      - equal:
          path: spec.endpoints[0].basicAuth.password.name
          value: prometheus-auth
      - equal:
          path: spec.endpoints[0].basicAuth.password.key
          value: password

  - it: should create servicemonitor with namespace selector
    set:
      serviceMonitor:
        enabled: true
        namespaceSelector:
          matchNames:
            - monitoring
            - kube-system
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: spec.namespaceSelector.matchNames[0]
          value: monitoring
      - equal:
          path: spec.namespaceSelector.matchNames[1]
          value: kube-system

  - it: should create servicemonitor with sample limit
    set:
      serviceMonitor:
        enabled: true
        sampleLimit: 1000
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: spec.sampleLimit
          value: 1000

  - it: should create servicemonitor with labels
    set:
      serviceMonitor:
        enabled: true
        labels:
          team: monitoring
          environment: production
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: metadata.labels.team
          value: monitoring
      - equal:
          path: metadata.labels.environment
          value: production

  - it: should create servicemonitor with annotations
    set:
      serviceMonitor:
        enabled: true
        annotations:
          description: "ServiceMonitor for KairosCloud application"
          contact: "monitoring@example.com"
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: metadata.annotations.description
          value: "ServiceMonitor for KairosCloud application"
      - equal:
          path: metadata.annotations.contact
          value: "monitoring@example.com"

  - it: should create servicemonitor with custom name
    set:
      fullnameOverride: "custom-app"
      serviceMonitor:
        enabled: true
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: metadata.name
          value: custom-app

  - it: should create servicemonitor with all options
    set:
      serviceMonitor:
        enabled: true
        port: metrics
        path: /metrics
        interval: 30s
        scrapeTimeout: 10s
        scheme: https
        tlsConfig:
          insecureSkipVerify: false
        bearerTokenSecret:
          name: prometheus-token
          key: token
        basicAuth:
          username:
            name: auth-secret
            key: username
          password:
            name: auth-secret
            key: password
        namespaceSelector:
          matchNames:
            - monitoring
        sampleLimit: 500
        labels:
          app: kairoscloud
        annotations:
          description: "Complete ServiceMonitor configuration"
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: spec.endpoints[0].port
          value: metrics
      - equal:
          path: spec.endpoints[0].path
          value: /metrics
      - equal:
          path: spec.endpoints[0].interval
          value: 30s
      - equal:
          path: spec.endpoints[0].scrapeTimeout
          value: 10s
      - equal:
          path: spec.endpoints[0].scheme
          value: https
      - equal:
          path: spec.endpoints[0].tlsConfig.insecureSkipVerify
          value: false
      - equal:
          path: spec.endpoints[0].bearerTokenSecret.name
          value: prometheus-token
      - equal:
          path: spec.endpoints[0].bearerTokenSecret.key
          value: token
      - equal:
          path: spec.endpoints[0].basicAuth.username.name
          value: auth-secret
      - equal:
          path: spec.endpoints[0].basicAuth.username.key
          value: username
      - equal:
          path: spec.endpoints[0].basicAuth.password.name
          value: auth-secret
      - equal:
          path: spec.endpoints[0].basicAuth.password.key
          value: password
      - equal:
          path: spec.namespaceSelector.matchNames[0]
          value: monitoring
      - equal:
          path: spec.sampleLimit
          value: 500
      - equal:
          path: metadata.labels.app
          value: kairoscloud
      - equal:
          path: metadata.annotations.description
          value: "Complete ServiceMonitor configuration"
