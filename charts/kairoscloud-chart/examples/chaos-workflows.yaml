# Chaos Mesh Workflow Examples
# Copy and modify these examples in your values.yaml file

# Example 1: Parallel Chaos Experiment
# Simulates multiple types of chaos simultaneously
parallelChaosExample:
  chaosMesh:
    enabled: true
    workflow:
      enabled: true
      entry: "entry"
      templates:
        - name: "entry"
          type: "Parallel"
          deadline: "240s"
          children:
            - "stress-chaos"
            - "network-chaos"
            - "pod-chaos"
        
        - name: "stress-chaos"
          type: "StressChaos"
          deadline: "60s"
          stressChaos:
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"
            stressors:
              cpu:
                workers: 1
                load: 50
        
        - name: "network-chaos"
          type: "NetworkChaos"
          deadline: "30s"
          networkChaos:
            action: "delay"
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"
            delay:
              latency: "10ms"
              correlation: "100"
              jitter: "0ms"
        
        - name: "pod-chaos"
          type: "PodChaos"
          deadline: "60s"
          podChaos:
            action: "pod-failure"
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"

---
# Example 2: Serial Workflow with Health Checks
# Performs health checks before injecting chaos
serialWithHealthCheckExample:
  chaosMesh:
    enabled: true
    workflow:
      enabled: true
      entry: "entry"
      templates:
        - name: "entry"
          type: "Serial"
          deadline: "300s"
          children:
            - "health-check"
            - "conditional-chaos"
        
        - name: "health-check"
          type: "Task"
          deadline: "30s"
          task:
            container:
              name: "health-check"
              image: "curlimages/curl:latest"
              command: ["curl", "-f", "http://my-app:8080/health"]
          conditionalBranches:
            - target: "pod-chaos"
              expression: "exitCode == 0"
            - target: "skip-chaos"
              expression: "exitCode != 0"
        
        - name: "conditional-chaos"
          type: "PodChaos"
          deadline: "60s"
          podChaos:
            action: "pod-kill"
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"
        
        - name: "skip-chaos"
          type: "Suspend"
          deadline: "10s"

---
# Example 3: Scheduled Chaos Experiments
# Runs chaos experiments on a schedule
scheduledChaosExample:
  chaosMesh:
    enabled: true
    workflow:
      enabled: true
      entry: "entry"
      templates:
        - name: "entry"
          type: "Schedule"
          deadline: "120s"
          schedule:
            schedule: "@every 30s"
            type: "PodChaos"
            podChaos:
              action: "pod-kill"
              mode: "one"
              selector:
                labelSelectors:
                  app: "my-app"

---
# Example 4: Complex Workflow with Multiple Chaos Types
# Demonstrates a comprehensive chaos testing scenario
complexWorkflowExample:
  chaosMesh:
    enabled: true
    workflow:
      enabled: true
      entry: "entry"
      templates:
        - name: "entry"
          type: "Serial"
          deadline: "600s"
          children:
            - "pre-chaos-check"
            - "chaos-phase-1"
            - "mid-chaos-check"
            - "chaos-phase-2"
            - "post-chaos-check"
        
        - name: "pre-chaos-check"
          type: "StatusCheck"
          deadline: "30s"
          statusCheck:
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"
            type: "HTTP"
            http:
              url: "http://my-app:8080/health"
              method: "GET"
              expectedStatus: 200
        
        - name: "chaos-phase-1"
          type: "Parallel"
          deadline: "120s"
          children:
            - "network-delay"
            - "cpu-stress"
        
        - name: "network-delay"
          type: "NetworkChaos"
          deadline: "60s"
          networkChaos:
            action: "delay"
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"
            delay:
              latency: "50ms"
              correlation: "100"
              jitter: "10ms"
        
        - name: "cpu-stress"
          type: "StressChaos"
          deadline: "60s"
          stressChaos:
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"
            stressors:
              cpu:
                workers: 1
                load: 30
        
        - name: "mid-chaos-check"
          type: "StatusCheck"
          deadline: "30s"
          statusCheck:
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"
            type: "HTTP"
            http:
              url: "http://my-app:8080/health"
              method: "GET"
              expectedStatus: 200
        
        - name: "chaos-phase-2"
          type: "PodChaos"
          deadline: "60s"
          podChaos:
            action: "pod-kill"
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"
        
        - name: "post-chaos-check"
          type: "StatusCheck"
          deadline: "30s"
          statusCheck:
            mode: "one"
            selector:
              labelSelectors:
                app: "my-app"
            type: "HTTP"
            http:
              url: "http://my-app:8080/health"
              method: "GET"
              expectedStatus: 200

---
# Example 5: JVM Application Chaos Testing
# Specifically designed for Java applications
jvmChaosExample:
  chaosMesh:
    enabled: true
    workflow:
      enabled: true
      entry: "entry"
      templates:
        - name: "entry"
          type: "Serial"
          deadline: "300s"
          children:
            - "jvm-latency"
            - "jvm-exception"
            - "jvm-return"
        
        - name: "jvm-latency"
          type: "JVMChaos"
          deadline: "60s"
          jvmChaos:
            action: "latency"
            target: "com.example.Service"
            method: "processRequest"
            latency: "100ms"
            mode: "one"
            selector:
              labelSelectors:
                app: "java-app"
        
        - name: "jvm-exception"
          type: "JVMChaos"
          deadline: "60s"
          jvmChaos:
            action: "exception"
            target: "com.example.Service"
            method: "processRequest"
            exception: "java.lang.RuntimeException"
            mode: "one"
            selector:
              labelSelectors:
                app: "java-app"
        
        - name: "jvm-return"
          type: "JVMChaos"
          deadline: "60s"
          jvmChaos:
            action: "return"
            target: "com.example.Service"
            method: "getValue"
            value: "chaos-value"
            mode: "one"
            selector:
              labelSelectors:
                app: "java-app"
